------------------------------------------------------
NOTES SUMMARY
------------------------------------------------------

** TIPS **
	> fetch(url): To get JSON results from API as a promise
	> console.table()
	> console.error()
	> an_array.map((o,i) => {});
	> an_array.filter(o => o> VALUE);
	> Object.freeze(object)
		It will prevent you from modifying an object property
		const person = {name: 'Juan'}; 
		person.name = 'JuanH'; //(this is allowed)
		Object.freeze(person);
		person.name = 'JuanHB';// (this is not allowed)
	> document.querySelector('. / #');
	> document.querySelectorAll('. / #');
	> Use Array.from(querySelectorAll) to convert a NodeList that comes from a document.querySelectorAll
	> any_element.addEventListener('the_event_like_click', function(){});\
	> any_element.classList.toggle('class_name')
	> any_element.textContent
	> any_element.classList.contains('class_name')
	> any_element.classList.contains('class_name')	
	> Creating HTML elements:	
		const info = document.querySelector('.info');
		const description = document.createElement('p');
		description.innerHTML = 'My name is blabla';
		info.appendChild(description);
	> dompurify to sanitize your code:
		<script src='http://cdnjs.cloudflare.com/ajax/libs/dompurify/0.8.2/purify.min.js'></script>
	> arguments is a KEYWORD IN A FUNCTION!!!!! It is a sort of array with all the arguments passed
	> Quick browser setup:
		npm init
		npm install browser-sync --save-dev
		under package.json/scripts node:
			"server": "browser-sync start --directory --server --files '*.js, *.html, *.css'"
		npm run server
	> Inheritance review:
		function Dog(name)
		{
			this.name = name;
		}
		
		Dog.prototype.Bark = function()
		{
			console.log('I am' + this.name);
		}

		const myDog = new Dog('Tobby');
	> setInterval(functionToRun, intervalInMs);
	> setTimeout(functionToRun, waitMs);

** VAR / CONST / LET **
	- var can be used before they are defined, but they are UNDEFINED, it wont throw an error
	- let/const will throw an error if used before being declared 
	- var is functon scoped, NOT block scoped ( by {} ) !!!!!
	- IIFE
		(function(){
			var name = 'abc'; // THIS NAME IS NOT USED OUTSIDE OF THIS FILE
							  // IT IS CONSTRAINED TO THIS FUNCTION	
		})();

		{
			let letters = 'abc'; 
			const other_letters = 'abc'; // these variables dont leak outside {}
		}
	- you can declare several times the same variable with var!!. 
	- let wont allow you to have the same variable name declared twice
	- let/const are scoped to {}  (that is, blocked scope)
	- use let inside loops, as they are blocked scope regardless of the content inside (time, ajax blocks)
	- const cant be changed, but it is not immutable:
		> const person = {name: 'Juan'}; person.name = 'JuanH'; (this is allowed)

** ARROW FUNCTIONS **
	- They have implicit return and does not rebind THIS.
	- this inside the arrow function is inherited from the parent. 
		> Beware when using 'this' as the element in use
		> It will come handy to not use that (instead of this)
	- function(){//blabla} ---> () => {//blabla} ---> (arg1, arg2) ==> {//blabla with arg1 arg2}
	- Implicit return: If not using {} in one liner it will return that line
		() => names; // names will be returned
		// Put names inside () if its an object like ()
	}
	- They can be assigned to variables:
		const saymyname = (name) => { alert(`Hellow $(name)`)};
		saymyname('Juan');
	- Not to use arrow functions when:
		> When you need to use 'this'
		> When you need to add a method bind to an object (and therefore you will have to use 'this')
		> If you need to use the keyword 'arguments'. Arguments is a keyword in 'functions' that returns an array with all the arguments passed. This keyword does not exist for arrow functions

** DEFAULT ARGUMENTS IN FUNCTIONS
	- function sayaword(anyword = 'Hello World!') {}
	- It is possible to use/pass undefined and javascript will use the default
		function computenumbers(first = 1,second = 2,third = 3){//blblbla}
		computenunbers(10,undefined, 25); // second will have the value of 2

** TEMPLATE STRINGS
	- `This is an string with a ${variable}`
	- Multilines:
		> Previously we had to use the \ charactor for multiline. With `` you can just enter a new line
		const multiline=` first line
							second line
						`;
		const previously = 'First line \
							Second line'
	- It is possible to write js code inside ${} and nest ``
		const dogs = [{name:'Ted',age: 5},{name:'Bob',age: 3},{name:'Sugus',age: 2}];
		const markup = `
			<ul>
			${dogs.map(dog => `
				<li>
				${dog.name} (${dog.age*6})
				</li>
				`)}
			</ul>
		`;
	- Othe example nesting and writing JS code
		const dog_a = {name:'Ted',owner:'Juan'};
		const dog_b = {name:'Toby'};
		${dog_a.name }, owned by ${dog_a.owner};
		// If there is no owner, we can wrap some code ino a ${} and use again a `` and ${} to display a value
		${dog_a.name } ${dog_a.owner ? `, ${dog_a.owner}` }
	- You can even use a function inside the `` to render other `` to make things cleaner.
	- Tagged functions -- Instead of the browser populating the tags, you can have a funciton to do the same, or make any modification internally,or even using the values as keys for a dictionary. The function gets an array with all the bits plus all the variables.
		And most importantly, usa this to SANITIZE!!!!
	  const sentence = function_name`Text 1 ${var1} text 2 ${var2}`;
			function function_name(sentences,...values)
			{
				let str = '';
				str = sentences.forEach((string, i) => {
					str += string + values[i] || '';
				});
				return str;
				/*

				sentences.reduce((sentence, string, i) => {
					return `${sentence}${string}${values[i] || ''}`
				}), '');

				*/
			}
	- Sanitizing your code:
		<script src='http://cdnjs.cloudflare.com/ajax/libs/dompurify/0.8.2/purify.min.js'></script>
		function sanitize(strings,...values)
		{
			const dirty = sentences.reduce((sentence, string, i) => {
					return `${sentence}${string}${values[i] || ''}`
				}), '');
			return DOMPurify.sanitize(dirty);
		}
		sanitize`Code with <img src='theimag' onload='alert('badcode')'>`;

** STRINGS NEW METHODS
	- .startsWith(string_to_look,number_caracters_to_look_after)
	- .endsWith(string_to_look,number_caracters_to_crop_string_to)
	- .includes()
	- .repeat() // Can be used to left pad 

** DESTRUCTURING
	- 	const person = {name:'Juan',age:50};
		const {name, age:theAge} = person; // This is equivalent to const name = person.name; const theAge = person.age;
		const {name, age:theAge, lastname: thelastname = 'defaultValue'} = person; // If person does not have a lastname property, i twill use the defaultValue into a property called thelastname
	- Destructuring array:
		const person = ['Juan',39,'Computer Science'];
		const [name, age, major] = person; // It will assign each component to those variables
		const team = ['Juan','Hasmin','Miguel','Sofia'];
		const [father,mather,...children] = team;
	- Swaping objects
		const one = 1; const two = 2;
		[one,two]  =[two,one];
	- Functions with args in any order and with default values:
		function tip({amount, tip = 20, tax = 0.13}){//blablabla};
		var amount = tip({tip : 10, amount: 5 });

** entries == ITERATOR OF ARRAY
	// entries retursn an iterator, with a next and a done properties.
	var names = ['Juan','Miguel','Sofia'];
	for(const [value,index] of names.entries())
	{

	}

** FOR IN (Loop)
	- Returns the index
	- It includes new things added to the array (not only the elements in the array, but also new properties or methods added!)

** FOR OF (Loop)
	- Best alternative for loops (foreach, for in or plain for loop)
	- Can have continue, break
	- Nice way of looping for array or other arrayish objects
	- It cant be used in Objects! ==> conts applee = {color: 'red', size: 10};
	- To be used with objects:
		> Polifill and use entries 
		> Use for in loop and use the key to get the value: object[key];
	- Or, to be used wiht objexts, you can use keys (Object.keys(array_name));

** ARRAY METHODS
	- Array.from(object, mappingFunction): Convert an arrayish into an array
	- Array.of(o1,o2,o3,o4) : Build an array out of values
	- an_array.find(): an_array.find(el => { el.property === 'value'})
		> For multiple findings, use filter
	- an_array.findIndex: an_array.findIndex(el => { el.property === 'value'}) : From the element, return the index in 	the array
	- an_array.some(el => el === 'value'): Returns true if ANY element matches the condition
	- an_array.every(el => el === 'value'): Returns true if EVENRY element matches the condition

** SPREAD OPERATOR (...VALUES)
	- Applied over any iterable (arrays, strings, dom nodes ,arguments, objects ...)
	- It will SPREAD an array into elements, which can be grouped back into an array
	- [...array1,'el2',...array3] : This will concatenate arrays
	- Can be use to copy (deep copy) an array: let new_array = [...old_array];
	- [...arrayish] is equivalent to Array.from(arraish);

** REST OPERATOR (...VALUES)
	- Used in grouping parameters in function definition ( function functionName(first, ...restParameters))
	- Used also in destructuring [first, second, restOfNumbers] = [1,2,3,4,5,6,7,8,9];

** OBJECT LITERALS:
	- If using a variable to create an object, no need to specify the property name if the variable name is the same:
		> 	var name = 'Juan';
			let person = {name: name}
			let person_2 = {name}
			// Person and person person_2 are equivalent
		>	var modal = { mymethod: function(){//blah blah blah}} ;
			var modal_2 = { mymethod() {//blah blah blah}} ;
			// modal and modal_2 are equivalent
	- Computer Property Name: 
		> 	const key = 'color';
			const value = 'blue';
			const valueNegative = 'red';
			const pants = { [key]: value,[${key}Negative]: value};
			// ${key}Negative: It is possible to compute key values

** PROMISES
	- A value-to-be in the future
	- Usage:
		> 	promise.then(toDoWhenDataIsReturned).catch(err => {console.log(err)});
			function toDoWhenDataIsReturned(data)
			{
				var jsonData = data.json(); //Important to convert data into json!!!
			}
	- Creating a promise:
		>	const myPromise = new Promise((resolve,reject) => {
				// Check if it should be OK
				resolve('here_the_object_data_to_return');
				// Check if it should be OK
				reject('here_the_object_err_to_return');
			});

			myPromise.then( data => {console.log(data)}) // data will be the 'here_the_object_data_to_return'
					 .catch(err => {console.log(err)}); // err will be the 'here_the_object_err_to_return'
	- Promises.All([promise1,promise2]).then(responses => { // responses is an array with one response per promise})

** PROMISYFING (and ASYNC/AWAIT) CALLBACK BASED FUNCTIONS
	- You can use es6promisify library
	- Recipe:
		> 	methodWithCallBack(successFunction,errorFunction);
			function methodWithCallBackPromisified()
			{
				return new Promise((resolve,reject) => {
					methodWithCallBack(resolve, reject);
				});
			}
			
			methodWithCallBackPromisified.then(data => {//blablabla})

			function async go()
			{
				var result = await methodWithCallBackPromisified();
			}

** CLASS PROPERTIES

** ASYNC and AWAIT
	- It is based on promise
	- If a function is using a promise inside, we can make that function async, and append await before of the promise method

			function breathe(ms){
				return new Promise((resolve,reject) => {
					setTimeout(() => resolve('Done'),amount);
				});
			}

			// The method below (waitandgo) makes use of promises
			async function waitandgo(ms){
				var r100 = await breath(100);
				var r200 = await breath(200);
			}
	- Await on multiples:
		async function go(){
			const p1 = fetch('abc');
			const p2 = fetch('cde');
			const result = await Promise.all([p1,p2]);

		}

	- High order function to wrap catch errors:
		function cathErrors(fn, errorHandler) {
				return function(...name) {
				return fn(...name).catch(errorHandler);
			};
		}

		function handlethis(err) {
			console.log('An error has beenfound');
			console.log(err);
		}

		const wrappederrors = cathErrors(anyFunctionThatHasPromisesInside, handlethis);
	

** SYMBOL (NEW PRIMITIVE)
	- Symbol: Unique identifier out of descriptor at a unique time. Same descriptor, different symbols
	- Useful to create unique identifiers as keys
	- It is not possible to loop over an array of symbols:
		> 	var syms = Object.getownPropertySymbls(arryayOfSymbols); // This is possible
			const data = sysm.map(s => arryayOfSymbols[s]);

** ESLINT
	- Installation:
		> 	node and npm are installed (node -v and npm -v are working
		> 	npm install -g eslint
		> 	npm install -g eslint-plugin-html
			npm install -g eslint-config-airbnb
			npm install -g eslint-plugin-jsx-a11y
			npm install -g eslint-plugin-react
			npm install eslint-plugin-import -g
		> create .eslintrc for settings
		> use airbnb style: "extends": "airbnb"
			* Check github site: https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb
			* TIP: npm install -g eslint-config-airbnb eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y
		> run: eslint file_to_check --fix
		> Add a global .eslintrc globally in your home directory (this will be completely overriden by a local .eslintrc)
		> Per file, you can enable or disable rules. For the whole file, or per line (enabling and disabling in the following line)
			/* globals var_name */ // This will specify global variables in a file
			/* eslint-disable eslint-rule-goes-here*/
			/* eslint-enable eslint-rule-goes-here*/
			/* eslint-disabld */ // It will completely disable ALL THE ESLINT!
		> Plugin     x: To lint the JS code inside HTML
		> Sublime plugin:
			* Install SublimeLinter AND SublimeLinter-contrib-lint
		> Create hook in git to prevent submit code when does not comply with eslint:
			* Rename .git/hook/commit-message.sample to .git/hook/commit-message
			* Copy paste the code from 
					https://github.com/wesbos/es6.io/blob/master/12%20-%20Code%20Quality%20with%20ESLint/commit-msg.txt
			* Before commiting the code inside will run and prevent if lint does complain

** JAVASCRIPT MODULES AND WEBPACK
	- No need to ALWAYS use modules. Simpler things dont require modules
	- If using modules, then you need/want to use webpack
	- You can combine webpack with babel
	- Module: Javascript file that can be shared among other files in an ordered manner
	- Tooling: 
		> npm: From your application, init and install npm modules
		> webpack (this will allow to use import on browsers that dont support es6): 
			* npm install webpack
		> bable (this will convert es6 into es5 complaint code):
			* npm install babel-loader babel-core babel-preset-es2015-native-modules --save-dev
		> create webpack.config.js file:
			* Add this code:
				const webpack = require('webpack');
				const nodeEnv = process.env.NODE_ENV || 'production';

				module.exports = {
				  devtool: 'source-map',
				  entry: {
				    filename: './app.js' <-- IMPORTANT - FIRST FILE IN YOUR APPLICATION
				  },
				  output: {
				    filename: '_build/bundle.js' <-- WHERE IT IS COMPILED
				  },
				  module: {
				    loaders: [
				      {
				        test: /\.js$/,
				        exclude: /node_modules/,
				        loader: 'babel-loader',
				        query: {
				          presets: ['es2015-native-modules']
				        }
				      }
				    ]
				  },
				  plugins: [
				    new webpack.optimize.UglifyJsPlugin({
				      compress: {
				        warnings: false
				      },
				      output: {
				        comments: false
				      },
				      sourceMap: true
				    }),
				    new webpack.DefinePlugin({
				      'process.env': { NODE_ENV: JSON.stringify(nodeEnv) }
				    })
				  ]
				};
		> Setup the build npm script in package.json:
			* 
				"scripts": {
        			"build": "webpack --progress --watch"
    			}
    	> Run:
    		* npm run build // build is the name we gave in the script file
    						// notice the watch in the script! This task will run in the background
    - Creating our own module:
    	* Module file (located at ./src/config.js):
    		const apiKey = 'the value to export';
    		export default apiKey; // DEFAULT EXPORT - ONLY ONE DEFAULT EXPORT
    		export const anyOtherThing = 'abc'; // NAME EXPORT
    		export function sayHi() {//blablabla} // NAME EXPORT for function
    		const name = 'Juan';
    		const age= 39;
    		export {name, age as NewAge}; //Exporting variables after being declared with different name

    	* Client file:
    		import any_name from './src/config'; // NOTICE THERE IS NO .JS
    											// This is the default export. It will ALWAYS point to apiKey
    		import { anyOtherThing,sayHi } from './src/config'; // NOTICE FOR NAME EXPORT THERE IS {}
    		import {name as UserName, NewAge} // IMPORTING WITH A DIFFERENT NAME
    - Other ways to bundle Javascript files (beside webpack)
    	* SystemJS
    		> You only need this code in your html:
    			<script src="jspm.io/system@0.19.js"></script>
    			<script>
    				System.config({transpiler: 'babel'});
    				System.import('./main.js');
    			</script>
    		> It can be just used in the browser. Easier to setup
    		> To use something from npm, you dont need to install it, instead, use this:
    			import {sum, kebabCase} from 'npm:lodash'; //notice the npm
    		> The rest of import and export is same as the instructions above
    		> Quite slow, good for testing!

** BABEL
	- Babel only works in syntax!! Not in a new methods
	- Javascript compiler. Allows to write any JS of any version and it will translated into other lower versions of JS
	- Install babel: npm install babel-cli (7.X or @next)
	- In your package.json / scripts:
				"scripts": {
        			"build": "babel app.js --watch --out-file app-compiled.js"
    			}
    - Add plugins and presets:
    	- Preset: collection of presets
    	- Plugins: Tiny set of conversions (for new or specific JS syntax)
    		> It needs to abe added under the babel node in your package.json file
    	- Use babel-present-env to tell babel to what sort of browsers to convert:
    		> npm install babel-preset-env
    		>  In package.json, add node:
					"babel": {
						"presets": [
							[
								"env",
								{
									"targets": {
										"browsers": [
											"last 2 versions",
											"safari >= 8"
											]
									}
								}
							]
						],
						"plugins": [
							"transform-object-rest-spread"
						]
					},
		- You can use a .babelrc instead of the babel node in package.json
		- Run: npm run babel

** POLYFILL
	- Babel only works in syntax!! Not in a new methods
	- For new methods/functions we need to polyfill
	- Polyfill: If the browser does not give that function, we need to recreated it (polyfill)
	- Using babel poyfill:
		- npm install --save-dev babel-polyfill
		- Add import "babel-polyfill" in your init first file
	- Using Polyfill.io	(if not using modules)
		- In your html, insert:
			<script src="https://cdn.polyfill.io/v2/polyfill.min.js"></script>

** CLASSES
	- Class Declaration
		class Dog {//blabla}
	- Class Expression:
		const Dog = class {//blabla}
	- Either way:
		class Class_Name {

			constructor(name){
				this.name = name;	
			}

			// PROPOSED CLASSED ATTRIBUTES
			myclassproperty = 0; // This is not yet in ES6 (but it is likely to be included)

			Function_Name()
			{
				console.log(`My Name is ${this.name}`);
			}

			static info() { //Blablab} // This will be called as Dog.info() (not in each dog instance)

			// Getters and Setters
			get get_name() { return 'something'}; // we can use as myclassinstance.get_name;
			set set_name(value) { this.someting = value;}; // we myclassinstance.set_name = 'something';
		}
	- Inheritance:
		class Child_Class extends Parent_Class{
			constructor()
			{
				super(); // Invocating te constructor of the parent (it will allow you to use 'this')
			}
		}
	- Extending existing collection:
		class MyCollection extends Array {
			constructor{ super()}
			MyMethod(){
				this.push(); // Using a method from the parent
			}
		}
** GENERATOR
	- Syntax:
		function* listPeople() // Notice using the *
		{
			yield 'One'; // yield: return for now, return and pause
			yield 'Two';
			yield 'Three';
		}

		var people = listPeople();
		var generatorReturn = people.next(); // Run up to the first yield
		generatorReturn.value // (actual yield return) 
		generatorReturn.done // (informs of whether there are more values)
	- Using generator for Ajax flow control:

		functio coolajax(url)
		{
			fetch(url).then(data => data.json()).then(data => steps.next(data));
			// By passing data to next, it will the return value of the yield coolajax;

		}
		
		function* steps ()
		{
			const info1 = yield coolajax(url1);
			const info2 = yield coolajax(url2 + '/' + info1.value);
			const info3 = yield coolajax(url3 + '/' + info2.value);

		}

		const data = steps();
		steps.next(); // Kicking it off
	- Looping through generators:
		function* multipleyields(){}
		const values = multipleyields();
		for(const value of values)
		{
			console.log(value); // For Of loop will call the next for you :D
		}

** PROXIES
	- Override default behavior of an operation in an object
		const person = {name: 'Juan'};
		const personProxy = new Proxy(person,{
			get(target,property){
				// Here we can modify, inspect ...
				return target[property];
			},
			set(target,property,value){
				// Here we can modify, inspect ...
				target[property] = value;
			}

		});

		const phoneHandlers = {
			get(target,property){
				// Here we can modify, inspect ...
				return target[property];
			},
			set(target,property,value){
				// Here we can modify, inspect ...
				target[property] = value;
			}
		};

		const phoneNumbers = new Proxy({},phoneHandlers);
		phoneNumbers.home = '456'; // When setting the value to the property, it will be inspected previously
		phoneNumbers.other = '456';

** SETS and WEAKSETS
	- Set: Kind of with unique values, with a nice API:
		> 	const numbers = new Set(['1','2','3'])
			numbers.add(1);
			numbers.delete(1);
			numbers.size
			numbers.clear()
			numbers.has(1);
			for(const number of numbers.values()){}
			// keys and entries also present
	- WeakSet: They clean themselves up (automatic garbage collected)
		> const weakSauce = new WeakSet([dog1,dog2,dog3]);
		> IT CAN ONLY CONTAINS OBJECTs (let dog1 = {name = 'Toby'})
		> We can not loop with FOR OF loop
		> There is not .clear method!
	- If using an object in a weakset and the object is deleted, the weakset will deleted after a while (not the case with a set!!!!

** MAPS
	- Dictionary, with ANYTHING as a key
	- It allows that, having an object as a key, store data about the object
	- the_map.has(key) , the_map.get(key) , the_map.delete(key), the_map.clear() to be used with keys
	- the_map.set(key, value)
	- To traverse"
		> map.forEach((value,key) => {value, jey})
		> for(const (value,key) of map) {}
	- WeakMap: 
		> No size, no enumerable (no loop over), the objects in the WeakMap will be auto deleted if not existing anymore outsde

** NEW METHODS
	- padStart:
		> 'something'.padStart(11,'X');// It will preapend any character until complete 4(or blank as default)
		> XXSomething
	- padEnd: 
		> 'something'.padEnd(15,'>');// It will append any character until total length is 2 (or blank as default)
		> something>>>>>>
	- Exponential Operator: 
		> 2**3 : 2 to the power of 3 (2^3)
	- Includes:
		> [1,2,3].includes(2); // true or false
	- Trailing Commans:
		const numbers = [1,2,3,4,]; // Already existing
		const person = {name: 'Juan',age: 39,}; // Already existing
		function family(mom,dad,children,){//blablabla} // NEW IN ES6
	- var person = {name: 'Juan',age: 39}
		> Object.entries(person)
			* [['name','Juan'],['age',39]]
		> Object.keys(person);
			* ['name','age']
		> Object.values(person)
			* ['Juan',39]

