------------------------------------------------------
NOTES SUMMARY
------------------------------------------------------

** TIPS **
	> console.table()
	> console.error()
	> an_array.map((o,i) => {});
	> an_array.filter(o => o> VALUE);
	>> Object.freeze(object)
		It will prevent you from modifying an object property
		const person = {name: 'Juan'}; 
		person.name = 'JuanH'; //(this is allowed)
		Object.freeze(person);
		person.name = 'JuanHB';// (this is not allowed)
	> document.querySelector('. / #');
	> any_element.addEventListener('the_event_like_click', function(){});\
	> any_element.classList.toggle('class_name')
	> any_element.classList.contains('class_name')
	> any_element.classList.contains('class_name')	
	> Use Array.from(querySelectorAll) to convert a NodeList that comes from a document.querySelectorAll
	> Creating HTML elements:	
		const info = document.querySelector('.info');
		const description = document.createElement('p');
		description.innerHTML = 'My name is blabla';
		info.appendChild(description);
	> dompurify to sanitize your code:
		<script src='http://cdnjs.cloudflare.com/ajax/libs/dompurify/0.8.2/purify.min.js'></script>
	> arguments is a KEYWORD IN A FUNCTION!!!!! It is a sort of array with all the arguments passed

** VAR / CONST / LET **
	- var can be used before they are defined, but they are UNDEFINED, it wont throw an error
	- let/const will throw an error if used before being declared 
	- var is functon scoped, NOT block scoped ( by {} ) !!!!!
	- IIFE
		(function(){
			var name = 'abc'; // THIS NAME IS NOT USED OUTSIDE OF THIS FILE
							  // IT IS CONSTRAINED TO THIS FUNCTION	
		})();

		{
			let letters = 'abc'; 
			const other_letters = 'abc'; // these variables dont leak outside {}
		}
	- you can declare several times the same variable with var!!. 
	- let wont allow you to have the same variable name declared twice
	- let/const are scoped to {}  (that is, blocked scope)
	- use let inside loops, as they are blocked scope regardless of the content inside (time, ajax blocks)
	- const cant be changed, but it is not immutable:
		> const person = {name: 'Juan'}; person.name = 'JuanH'; (this is allowed)

** ARROW FUNCTIONS **
	- They have implicit return and does not rebind THIS.
	- this inside the arrow function is inherited from the parent. 
		> Beware when using 'this' as the element in use
		> It will come handy to not use that (instead of this)
	- function(){//blabla} ---> () => {//blabla} ---> (arg1, arg2) ==> {//blabla with arg1 arg2}
	- Implicit return: If not using {} in one liner it will return that line
		() => names; // names will be returned
		// Put names inside () if its an object like ()
	}
	- They can be assigned to variables:
		const saymyname = (name) => { alert(`Hellow $(name)`)};
		saymyname('Juan');
	- Not to use arrow functions when:
		> When you need to use 'this'
		> When you need to add a method bind to an object (and therefore you will have to use 'this')
		> If you need to use the keyword 'arguments'. Arguments is a keyword in 'functions' that returns an array with all the arguments passed. This keyword does not exist for arrow functions

** DEFAULT ARGUMENTS IN FUNCTIONS
	- function sayaword(anyword = 'Hello World!') {}
	- It is possible to use/pass undefined and javascript will use the default
		function computenumbers(first = 1,second = 2,third = 3){//blblbla}
		computenunbers(10,undefined, 25); // second will have the value of 2

** TEMPLATE STRINGS
	- `This is an string with a ${variable}`
	- Multilines:
		> Previously we had to use the \ charactor for multiline. With `` you can just enter a new line
		const multiline=` first line
							second line
						`;
		const previously = 'First line \
							Second line'
	- It is possible to write js code inside ${} and nest ``
		const dogs = [{name:'Ted',age: 5},{name:'Bob',age: 3},{name:'Sugus',age: 2}];
		const markup = `
			<ul>
			${dogs.map(dog => `
				<li>
				${dog.name} (${dog.age*6})
				</li>
				`)}
			</ul>
		`;
	- Othe example nesting and writing JS code
		const dog_a = {name:'Ted',owner:'Juan'};
		const dog_b = {name:'Toby'};
		${dog_a.name }, owned by ${dog_a.owner};
		// If there is no owner, we can wrap some code ino a ${} and use again a `` and ${} to display a value
		${dog_a.name } ${dog_a.owner ? `, ${dog_a.owner}` }
	- You can even use a function inside the `` to render other `` to make things cleaner.
	- Tagged functions -- Instead of the browser populating the tags, you can have a funciton to do the same, or make any modification internally,or even using the values as keys for a dictionary. The function gets an array with all the bits plus all the variables.
		And most importantly, usa this to SANITIZE!!!!
	  const sentence = function_name`Text 1 ${var1} text 2 ${var2}`;
			function function_name(sentences,...values)
			{
				let str = '';
				str = sentences.forEach((string, i) => {
					str += string + values[i] || '';
				});
				return str;
				/*

				sentences.reduce((sentence, string, i) => {
					return `${sentence}${string}${values[i] || ''}`
				}), '');

				*/
			}
	- Sanitizing your code:
		<script src='http://cdnjs.cloudflare.com/ajax/libs/dompurify/0.8.2/purify.min.js'></script>
		function sanitize(strings,...values)
		{
			const dirty = sentences.reduce((sentence, string, i) => {
					return `${sentence}${string}${values[i] || ''}`
				}), '');
			return DOMPurify.sanitize(dirty);
		}
		sanitize`Code with <img src='theimag' onload='alert('badcode')'>`;

** STRINGS NEW METHODS
	- .startsWith(string_to_look,number_caracters_to_look_after)
	- .endsWith(string_to_look,number_caracters_to_crop_string_to)
	- .includes()
	- .repeat() // Can be used to left pad 

** DESTRUCTURING
	- 	const person = {name:'Juan',age:50};
		const {name, age:theAge} = person; // This is equivalent to const name = person.name; const theAge = person.age;
		const {name, age:theAge, lastname: thelastname = 'defaultValue'} = person; // If person does not have a lastname property, i twill use the defaultValue into a property called thelastname
	- Destructuring array:
		const person = ['Juan',39,'Computer Science'];
		const [name, age, major] = person; // It will assign each component to those variables
		const team = ['Juan','Hasmin','Miguel','Sofia'];
		const [father,mather,...children] = team;
	- Swaping objects
		const one = 1; const two = 2;
		[one,two]  =[two,one];
	- Functions with args in any order and with default values:
		function tip({amount, tip = 20, tax = 0.13}){//blablabla};
		var amount = tip({tip : 10, amount: 5 });

** entries == ITERATOR OF ARRAY
	// entries retursn an iterator, with a next and a done properties.
	var names = ['Juan','Miguel','Sofia'];
	for(const [value,index] of names.entries())
	{

	}

** FOR IN
	- Returns the index
	- It includes new things added to the array (not only the elements in the array, but also new properties or methods added!)

** FOR OF 
	- Best alternative for loops (foreach, for in or plain for loop)
	- Can have continue, break
	- Nice way of looping for array or other arrayish objects
	- It cant be used in Objects! ==> conts applee = {color: 'red', size: 10};
	- To be used with objects, you can polifill and use entries 
	- Or, to be used wiht objexts, you can use keys (Object.keys(array_name));

** Array methods
	-- Array.from()